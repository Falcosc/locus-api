package locus.api.objects;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import locus.api.utils.DataReaderBigEndian;
import locus.api.utils.DataWriterBigEndian;
import locus.api.utils.Logger;

public class StorableUtils {

    // tag for logger
    private static final String TAG = "Storable";

    /**
     * Read certain class from input.
     *
     * @param claz class to instantiate and read
     * @param dr   reader with data
     * @return read class
     * @throws IOException            thrown in case of invalid data format
     * @throws InstantiationException throws if class cannot be initialized
     * @throws IllegalAccessException in case of access to class constructor is limited
     */
    public static <E extends Storable> E read(Class<E> claz, DataReaderBigEndian dr)
            throws IOException, InstantiationException, IllegalAccessException {
        // read header
        Storable.BodyContainer bc = Storable.readData(dr);

        // now initialize object. Data are already loaded, so error will not break data flow
        E storable = claz.newInstance();
        storable.readObject(bc.version, new DataReaderBigEndian(bc.data));
        return storable;
    }

    /**
     * Allows to read object, that is not known.
     *
     * @param dr instance of data reader
     * @throws IOException thrown in case of invalid data format
     */
    public static void readUnknownObject(DataReaderBigEndian dr) throws IOException {
        // read header. This also allow to skip body of object
        Storable.readData(dr);
    }

    // LIST READING/WRITING

    /**
     * Read list of certain classes from input stream.
     *
     * @param claz class to instantiate and read
     * @param data byte array with pack data
     * @return loaded list of items
     * @throws IOException thrown in case of invalid data format
     */
    public static <E extends Storable> List<E> readList(Class<E> claz,
                                                        byte[] data) throws IOException {
        return new DataReaderBigEndian(data).readListStorable(claz);
    }

    /**
     * Read list of certain classes from input stream.
     *
     * @param claz class to instantiate and read
     * @param dis  input stream with data
     * @return loaded list of items
     * @throws IOException thrown in case of invalid data format
     */
    public static <E extends Storable> List<E> readList(Class<E> claz,
                                                        DataInputStream dis) throws IOException {
        // prepare container
        List<E> objs = new ArrayList<>();

        // read size
        int count = dis.readInt();
        if (count == 0) {
            return objs;
        }

        // read locations
        for (int i = 0; i < count; i++) {
            try {
                E item = claz.newInstance();
                item.read(dis);
                objs.add(item);
            } catch (InstantiationException e) {
                Logger.logE(TAG, "readList(" + claz + ", " + dis + ")", e);
            } catch (IllegalAccessException e) {
                Logger.logE(TAG, "readList(" + claz + ", " + dis + ")", e);
            }
        }
        return objs;
    }

    // WRITE LIST PART

    /**
     * Get list of items as byte array.
     *
     * @param data list of storable items
     * @return generated byte array with items
     */
    public static byte[] getAsBytes(List<? extends Storable> data) {
        try {
            DataWriterBigEndian dw = new DataWriterBigEndian();
            dw.writeListStorable(data);
            return dw.toByteArray();
        } catch (Exception e) {
            Logger.logE(TAG, "getAsBytes(" + data + ")", e);
        }
        return null;
    }

    /**
     * Write certain list into output stream.
     *
     * @param objs list of storable items
     * @param dos  output stream where to write items
     * @throws IOException thrown in case of invalid data format
     */
    public static void writeList(List<? extends Storable> objs, DataOutputStream dos)
            throws IOException {
        // get size of list
        int size;
        if (objs == null) {
            size = 0;
        } else {
            size = objs.size();
        }

        // write size of list
        dos.writeInt(size);
        if (size == 0) {
            return;
        }

        // write objects
        for (int i = 0, n = objs.size(); i < n; i++) {
            dos.write(objs.get(i).getAsBytes());
        }
    }
}
